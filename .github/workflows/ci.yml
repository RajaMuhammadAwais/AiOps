name: 🚀 AIOps CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: 📦 Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov black flake8 mypy bandit

      - name: 🧪 Run tests
        run: |
          python -m pytest tests/ -v --cov=src --cov-report=xml --cov-fail-under=0

      - name: 📏 Lint and format check
        run: |
          black . --check
          flake8 src/ --max-line-length=88
          mypy src/ --ignore-missing-imports

      - name: 🔍 Security check
        run: |
          bandit -r src/ -f json -o bandit-report.json

      - name: 📤 Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: coverage.xml

      - name: 📤 Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: 📦 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 📦 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: 📦 Install Node.js dependencies
        run: npm ci

      - name: 🔨 Build application
        run: |
          python -c "import src; print('Python build validation successful')"
          npm run build # Assumes a build script in package.json

      - name: 📊 Generate demo data
        run: |
          python demo/demo_data_generator.py

      - name: 🧪 Run demo
        run: |
          python demo/demo_aiops.py

      - name: 📤 Upload demo data
        uses: actions/upload-artifact@v4
        with:
          name: demo-data
          path: |
            demo/demo_alerts.json
            demo/demo_current_data.json
            demo/demo_historical_data.json

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: 📦 Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: 📦 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 📦 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: 📦 Install Node.js dependencies
        run: npm ci

      - name: 🚀 Deploy to staging
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          DEPLOY_ENDPOINT: ${{ secrets.STAGING_ENDPOINT }}
        run: |
          ./install_aiops.sh --staging
          python web_dashboard.py --deploy staging

name: AIOps CI/CD

on:
  push:
    branches: [ main, master ]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  lint-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

          pip install -r requirements.txt
          pip install black mypy
      - name: Lint with flake8 (all errors)
        run: |
          flake8 src/ --count --show-source --statistics
      - name: Check formatting (black)
        run: |
          black --check .
      - name: Static type check (mypy)
        run: |
          mypy src || true

      - name: Run tests with coverage
        run: |
          pip install pytest-cov
          PYTHONPATH=src pytest --cov=src --cov-report=xml tests/

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml-${{ github.run_id }}
          path: coverage.xml

  pr-summary:
    if: github.event_name == 'pull_request'
    needs: lint-test
    runs-on: ubuntu-latest

    steps:
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-xml-${{ github.run_id }}
          path: .

      - name: Check if coverage report exists
        run: |
          if [ ! -f "coverage.xml" ]; then
            echo "No coverage report found."
            exit 1
          fi

      - name: Add PR label
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: ci-passed

      - name: Assign reviewers
        uses: ahmadnassri/action-auto-assign@v2.2.0
        with:
          reviewers: smdevops024

      - name: Post PR summary comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let coverage = 'Coverage report not found.';
            try {
              coverage = fs.readFileSync('coverage.xml', 'utf8').split('\n').slice(0, 10).join('\n');
            } catch (e) {}
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `âœ… CI Passed!\n\n**Coverage (first 10 lines):**\n\n\`\`\`xml\n${coverage}\n\`\`\``
            });

  build-artifacts:
    needs: lint-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Build wheel and sdist
        run: |
          python -m pip install --upgrade pip build
          python -m build
      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [lint-test, build-artifacts]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download dist artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  versioning:
    if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/')
    needs: lint-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bump2version

      - name: Determine version bump type
        id: bump_type
        run: |
          if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
            echo "bump_type=minor" >> $GITHUB_ENV
          else
            echo "bump_type=patch" >> $GITHUB_ENV
          fi

      - name: Bump version and generate release notes
        run: |

          bump2version patch
          echo "Release notes for version $(grep current_version .bumpversion.cfg | awk '{print $3}')" > release_notes.txt

      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes-${{ github.run_id }}
          path: release_notes.txt
